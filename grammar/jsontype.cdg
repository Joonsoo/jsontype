Defs = (WS Package)? (WS Import)* (WS Def)* WS
       {Defs(pkg=$0, imports=$1, defs=$2)}

Package = "package"&Tk WS LongName {Package(name=$2)}
Import = "import"&Tk WS StringLiteral {Import(filepath=$2)}

Def: Def = TypeDef | ClassDef | ClassReaderDef

TypeDef = "type"&Tk WS Name WS '=' WS Type {TypeDef(name=$2, typ=$6)}

ClassDef = Name WS ObjDef {ClassDef(name=$0, def=$2)}
ClassReaderDef = ClassReaderName WS ObjDef {ClassReaderDef(name=$0, def=$2)}

ObjDef
  = '{' (WS ObjField (WS ',' WS ObjField)* (WS ',')? {[$1] + $2})? (WS ObjRest)? WS '}'
    {ObjDef(fields=$1 ?: [], rest=$2)}
ObjField
  = ("optional"&Tk WS)? ("var"&Tk WS)? ObjFieldNames (WS "as"&Tk WS Name)? WS ':' WS Type
    {ObjField(isOptional=ispresent($0), isVar=ispresent($1), objFieldName=$2, nameAs=$3, typ=$7)}
ObjFieldNames = ObjFieldName (WS '|' WS ObjFieldName)* {ObjFieldNames(names=[$0] + $1)}
ObjFieldName: ObjFieldName = StringLiteral | Name
ObjRest = "..." (WS "as"&Tk WS Name)? (WS ':' WS Type)? {ObjRest(name=$1, typ=$2)}

ClassReaderName = Name WS "::" WS Name {ClassReaderName(cls=$0, reader=$4)}

Type: Type = NonUnionType | UnionType
NonUnionType: NonUnionType
  = ClassDef | ClassReaderDef | LongName | ClassReaderName | ObjDef | ArrayType
UnionType = NonUnionType (WS '|' WS NonUnionType)+ {UnionType(types=[$0] + $1)}

LongName = Name (WS '.' WS Name)* {LongName(names=[$0] + $1)}
ArrayType = '[' WS Type WS ']' {ArrayType(elemType=$2)}


StringLiteral = '"' CharElem* '"' {StringLiteral(chars=$1)}
CharElem: CharElem
  = .-'"\\' {Character(value=$0)}
  | '\\' '\\"/bnrt' {EscapeCode(code=$1)}
  | '\\' 'u' hex hex hex hex {Unicode(hexcode=str($2,$3,$4,$5))}
hex = '0-9A-Fa-f'

Name = <'a-zA-Z_' 'a-zA-Z_0-9'* {Name(name=str($0, $1))}>-Keyword
     | '`' (.-'`')* '`' {Name(name=str($1))}
Tk = <'a-zA-Z_' 'a-zA-Z_0-9'*>
Keyword = "import" | "type" | "optional" | "var" | "let" | "as"

WS = (' \n\r\t' | Comment)* {""}
Comment = LineComment | BlockComment
LineComment = "//" (.-'\n')* ('\n' | EOF)
EOF = !.
BlockComment = "/*" ((. !"*/")* .)? "*/"
